#ifndef sawtooth_es3_parameter_h
#define sawtooth_es3_parameter_h
#include <map>
namespace Sawtooth {
	namespace Parameter {
		struct ParameterGrowthES3 {
			double Int;
			double LnB;
			double B;
			double AS;
			double BLS;
			double BS;
			double SL1;
			double SL2;
			double CASL;
			double TWI;
			double DAI;
			double DAP;
			double Tc;
			double T;
			double E;
			double W1;
			double W2;
			double W3;
			double N;
			double C;
			double BLSxSL;
			double BLSxCASL;
			double BLSxTWI;
			double BLSxDAI;
			double BLSxDAP;
			double BLSxT;
			double BLSxE;
			double BLSxW;
			double BLSxN;
			double BLSxC;
			double SLxDAI;
			double SLxDAP;
			double CASLxDAI;
			double CASLxDAP;
			double TWIxDAI;
			double TWIxDAP;
			double SLxT;
			double SLxE;
			double SLxW;
			double SLxN;
			double SLxC;
			double CASLxT;
			double CASLxE;
			double CASLxW;
			double CASLxN;
			double CASLxC;
			double TWIxT;
			double TWIxE;
			double TWIxW;
			double TWIxN;
			double TWIxC;
			double DAIxT;
			double DAIxE;
			double DAIxW;
			double DAIxN;
			double DAIxC;
			double DAPxT;
			double DAPxE;
			double DAPxW;
			double DAPxN;
			double DAPxC;
			double TxE;
			double TxW;
			double NxT;
			double NxT2;
			double NxE;
			double NxE2;
			double NxW;
			double NxW2;
			double CxT;
			double CxT2;
			double CxE;
			double CxE2;
			double CxW;
			double CxW2;
			double CxN;
			double CxN2;
			double BLSxSLxDAI;
			double BLSxCASLxDAI;
			double BLSxTWIxDAI;
			double BLSxSLxDAP;
			double BLSxCASLxDAP;
			double BLSxTWIxDAP;
			double BLSxSLxT;
			double BLSxCASLxT;
			double BLSxTWIxT;
			double BLSxSLxE;
			double BLSxCASLxE;
			double BLSxTWIxE;
			double BLSxSLxW;
			double BLSxCASLxW;
			double BLSxTWIxW;
			double BLSxSLxN;
			double BLSxCASLxN;
			double BLSxTWIxN;
			double BLSxSLxC;
			double BLSxCASLxC;
			double BLSxTWIxC;
			double SLxDAIxT;
			double SLxDAPxT;


			ParameterGrowthES3() {}

			ParameterGrowthES3(const EquationSet& values)
			{
				Int = values.at("Int");
				LnB = values.at("LnB");
				B = values.at("B");
				AS = values.at("AS");
				BLS = values.at("BLS");
				BS = values.at("BS");
				SL1 = values.at("SL1");
				SL2 = values.at("SL2");
				CASL = values.at("CASL");
				TWI = values.at("TWI");
				DAI = values.at("DAI");
				DAP = values.at("DAP");
				Tc = values.at("Tc");
				T = values.at("T");
				E = values.at("E");
				W1 = values.at("W1");
				W2 = values.at("W2");
				W3 = values.at("W3");
				N = values.at("N");
				C = values.at("C");
				BLSxSL = values.at("BLSxSL");
				BLSxCASL = values.at("BLSxCASL");
				BLSxTWI = values.at("BLSxTWI");
				BLSxDAI = values.at("BLSxDAI");
				BLSxDAP = values.at("BLSxDAP");
				BLSxT = values.at("BLSxT");
				BLSxE = values.at("BLSxE");
				BLSxW = values.at("BLSxW");
				BLSxN = values.at("BLSxN");
				BLSxC = values.at("BLSxC");
				SLxDAI = values.at("SLxDAI");
				SLxDAP = values.at("SLxDAP");
				CASLxDAI = values.at("CASLxDAI");
				CASLxDAP = values.at("CASLxDAP");
				TWIxDAI = values.at("TWIxDAI");
				TWIxDAP = values.at("TWIxDAP");
				SLxT = values.at("SLxT");
				SLxE = values.at("SLxE");
				SLxW = values.at("SLxW");
				SLxN = values.at("SLxN");
				SLxC = values.at("SLxC");
				CASLxT = values.at("CASLxT");
				CASLxE = values.at("CASLxE");
				CASLxW = values.at("CASLxW");
				CASLxN = values.at("CASLxN");
				CASLxC = values.at("CASLxC");
				TWIxT = values.at("TWIxT");
				TWIxE = values.at("TWIxE");
				TWIxW = values.at("TWIxW");
				TWIxN = values.at("TWIxN");
				TWIxC = values.at("TWIxC");
				DAIxT = values.at("DAIxT");
				DAIxE = values.at("DAIxE");
				DAIxW = values.at("DAIxW");
				DAIxN = values.at("DAIxN");
				DAIxC = values.at("DAIxC");
				DAPxT = values.at("DAPxT");
				DAPxE = values.at("DAPxE");
				DAPxW = values.at("DAPxW");
				DAPxN = values.at("DAPxN");
				DAPxC = values.at("DAPxC");
				TxE = values.at("TxE");
				TxW = values.at("TxW");
				NxT = values.at("NxT");
				NxT2 = values.at("NxT2");
				NxE = values.at("NxE");
				NxE2 = values.at("NxE2");
				NxW = values.at("NxW");
				NxW2 = values.at("NxW2");
				CxT = values.at("CxT");
				CxT2 = values.at("CxT2");
				CxE = values.at("CxE");
				CxE2 = values.at("CxE2");
				CxW = values.at("CxW");
				CxW2 = values.at("CxW2");
				CxN = values.at("CxN");
				CxN2 = values.at("CxN2");
				BLSxSLxDAI = values.at("BLSxSLxDAI");
				BLSxCASLxDAI = values.at("BLSxCASLxDAI");
				BLSxTWIxDAI = values.at("BLSxTWIxDAI");
				BLSxSLxDAP = values.at("BLSxSLxDAP");
				BLSxCASLxDAP = values.at("BLSxCASLxDAP");
				BLSxTWIxDAP = values.at("BLSxTWIxDAP");
				BLSxSLxT = values.at("BLSxSLxT");
				BLSxCASLxT = values.at("BLSxCASLxT");
				BLSxTWIxT = values.at("BLSxTWIxT");
				BLSxSLxE = values.at("BLSxSLxE");
				BLSxCASLxE = values.at("BLSxCASLxE");
				BLSxTWIxE = values.at("BLSxTWIxE");
				BLSxSLxW = values.at("BLSxSLxW");
				BLSxCASLxW = values.at("BLSxCASLxW");
				BLSxTWIxW = values.at("BLSxTWIxW");
				BLSxSLxN = values.at("BLSxSLxN");
				BLSxCASLxN = values.at("BLSxCASLxN");
				BLSxTWIxN = values.at("BLSxTWIxN");
				BLSxSLxC = values.at("BLSxSLxC");
				BLSxCASLxC = values.at("BLSxCASLxC");
				BLSxTWIxC = values.at("BLSxTWIxC");
				SLxDAIxT = values.at("SLxDAIxT");
				SLxDAPxT = values.at("SLxDAPxT");

			}
		};
	}
}

#endif
